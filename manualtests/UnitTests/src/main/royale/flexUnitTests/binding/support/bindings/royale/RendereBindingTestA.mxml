<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<js:HGroup  xmlns:fx="http://ns.adobe.com/mxml/2009"
            implements="flexUnitTests.binding.support.IBindingTest"
            xmlns:js="library://ns.apache.org/royale/basic"
            xmlns:bindings="flexUnitTests.binding.support.bindings.royale.*"
            xmlns:bindables="flexUnitTests.binding.support.bindings.bindables.*"
            xmlns:internalmxml="flexUnitTests.binding.support.bindings.royale.internalmxml.*"
            initComplete="initCompleteHandler()">


    <fx:Script>
        <![CDATA[
        import flexUnitTests.binding.support.bindings.bindables.ITaskVO;
        import flexUnitTests.binding.support.bindings.bindables.TaskVO;
        import flexUnitTests.binding.support.bindings.bindables.TaskVO_on_top_of_class;
        import flexUnitTests.binding.support.bindings.bindables.TaskVO_on_top_of_property;

        import org.apache.royale.reflection.getQualifiedClassName;
        //IBindingTest methods
        public function get testName():String {
            return getQualifiedClassName(this);
        }

        public function get internalTestCount():uint {
            return getTests().length;
        }

        public function setInboundValue(value:*, internalTestNum:uint = 0):void {
            try{
                getTests()[internalTestNum]['setVal'](value)
            } catch(e:Error) {
                e.message = "[fail in internal test "+internalTestNum +"]:" +e.message;
                throw e;
            }
        }

        public function getBindingResultValue(internalTestNum:uint = 0):* {
            var result:*;
            try{
                result = getTests()[internalTestNum]['getVal']()
            } catch(e:Error) {
                e.message = "[fail in internal test "+internalTestNum +"]:" +e.message;
                throw e;
            }
            return result;
        }

        private var _tests:Array;
        //only one internal test
        private function getTests():Array {
            if (!_tests) {
                _tests = [
                    { //test 0 String
                        'setVal': function (value:*):void {
                            //do nothing, this test is to get the initial value
                        },
                        'getVal': function ():* {
                            return testRenderer.checkBoxTarget.text;
                        }
                    },
                    { //test 1
                        'setVal': function (value:*):void {
                            testRenderer.data = getTestItem(value)
                        },
                        'getVal': function ():* {
                            return testRenderer.checkBoxTarget.text;
                        }
                    },
                    { //test 1
                        'setVal': function (value:*):void {
                            var item:ITaskVO =  getTestItem(value);
                            testRenderer.data = item;
                            item.tooltip = value;
                        },
                        'getVal': function ():* {
                            return testRenderer.checkBoxTarget.text;
                        }
                    }

                    /*{ //test 0 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableString = value
                        },
                        'getVal': function ():* {
                            return testLabel1.text;
                        }
                    },
                    { //test 1 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableString = value
                        },
                        'getVal': function ():* {
                            return destinationObject.destString;
                        }
                    }
                    ,
                    { //test 2  Binding test
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableNumber = value
                        },
                        'getVal': function ():* {
                            return destinationObject.destNumber;
                        }
                    },
                    { //test 3 Binding test
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableNumber = value
                        },
                        'getVal': function ():* {
                            return testLabel2.text;
                        }
                    }
                    ,
                    { //test 4 Binding test
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableNumber = value
                        },
                        'getVal': function ():* {
                            return destinationObject.destNumber;
                        }
                    },
                    { //test 5 Binding test
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableNumber = value
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.lowerLevelNumDest;
                        }
                    }*/
                ]
            }
            return _tests;
        }
        private var testItems:Array;
        public function getTestItem(index:int):ITaskVO {
            if (!testItems) {
                testItems = [
                    new TaskVO('myTaskVOlabel1', 'mydata1','mytooltip1'),
                    new TaskVO('myTaskVOlabel2', 'mydata2','mytooltip2'),
                    new TaskVO_on_top_of_class('myTaskVOClassToplabel3', 'mydata3','mytooltip3'),
                    new TaskVO_on_top_of_class('myTaskVOClassToplabel4', 'mydata4','mytooltip4'),
                    new TaskVO_on_top_of_property('myTaskVOPropToplabel5', 'mydata5','mytooltip5'),
                    new TaskVO_on_top_of_property('myTaskVOPropToplabel6', 'mydata6','mytooltip6')
                ];

            }

            return testItems[index];
        }


        private function initCompleteHandler():void {
           // trace('initCompleteHandler', this);
        }

        ]]>
    </fx:Script>

  <!--  <js:beads>
        <js:ContainerDataBinding/>
    </js:beads>-->

    <internalmxml:TaskVOItemRenderer id="testRenderer" />
</js:HGroup>
